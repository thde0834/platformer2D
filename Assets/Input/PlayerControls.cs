//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""2173739d-a479-4a90-888b-9fef8e45b98e"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""928d5f56-6c9f-42a5-99ac-508e8e2c0508"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""34872c62-2394-4b90-8cf1-8772cfa6da2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""98e78481-2a2f-4cde-a7d6-1ea7aa7e4900"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""a765a4f3-02f4-43f5-8d46-7133d930d4cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cf7f227e-52a9-4db4-b1b0-4b8c7cd1c019"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""5255f53c-06e4-4763-88ea-33baebe3742c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""2d0e573b-3b6a-4027-922b-a7fbd0c483ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""597bd4a2-ddf6-4615-8329-5dc7d893fc73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Map"",
                    ""type"": ""Button"",
                    ""id"": ""b6b38450-ee96-425d-b6f4-cd1603e8a475"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast"",
                    ""type"": ""Button"",
                    ""id"": ""94bf21d2-dcfc-4000-aaef-f1475cb3181e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellUp"",
                    ""type"": ""Button"",
                    ""id"": ""ac1b509f-7aa1-44e3-a3a6-dd8d1f0e6a43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellDown"",
                    ""type"": ""Button"",
                    ""id"": ""e1d111c6-da27-4596-b7bc-ec82d9ca0aae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellLeft"",
                    ""type"": ""Button"",
                    ""id"": ""37e414f9-6533-4a95-b3f2-3a632f9792b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpellRight"",
                    ""type"": ""Button"",
                    ""id"": ""2aba6648-3f3d-4fd4-b9d0-54520d5d3d4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22e37ecb-c638-4fcb-8121-72717043f85d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3b2f369-8182-4362-9f55-2cf9d5c2ec2e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61044877-0942-4078-a87f-1340944e39bc"",
                    ""path"": ""<Keyboard>/Escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f17c698-09d7-4922-87c0-c792fa7263b4"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b7e2e06-762a-46a0-8302-00d74eeb4341"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61f8b5fb-1476-428f-821a-9fa92c0b5dc4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1f0427a-86b3-4dea-9941-b98f1c6dfaf9"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31a9d79e-4b6b-4295-8081-1ef1856a5422"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c08ba2e-5fd5-43f8-8e1e-4c85fe842711"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SpellUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96f56f2c-36d4-4bc8-a9ec-09039caddf2c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SpellDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb77e64b-582f-4c5d-be28-54abcb8475fc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SpellLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2139375-1b05-4746-ad0a-b641c69ceff8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SpellRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7880db6-5758-4b54-99a4-af0b31df8e8f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7d789b5-97c0-4c4f-a5c8-775fce6fe942"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Up = m_Controls.FindAction("Up", throwIfNotFound: true);
        m_Controls_Down = m_Controls.FindAction("Down", throwIfNotFound: true);
        m_Controls_Left = m_Controls.FindAction("Left", throwIfNotFound: true);
        m_Controls_Right = m_Controls.FindAction("Right", throwIfNotFound: true);
        m_Controls_Jump = m_Controls.FindAction("Jump", throwIfNotFound: true);
        m_Controls_Escape = m_Controls.FindAction("Escape", throwIfNotFound: true);
        m_Controls_Interact = m_Controls.FindAction("Interact", throwIfNotFound: true);
        m_Controls_Cancel = m_Controls.FindAction("Cancel", throwIfNotFound: true);
        m_Controls_Map = m_Controls.FindAction("Map", throwIfNotFound: true);
        m_Controls_Cast = m_Controls.FindAction("Cast", throwIfNotFound: true);
        m_Controls_SpellUp = m_Controls.FindAction("SpellUp", throwIfNotFound: true);
        m_Controls_SpellDown = m_Controls.FindAction("SpellDown", throwIfNotFound: true);
        m_Controls_SpellLeft = m_Controls.FindAction("SpellLeft", throwIfNotFound: true);
        m_Controls_SpellRight = m_Controls.FindAction("SpellRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private IControlsActions m_ControlsActionsCallbackInterface;
    private readonly InputAction m_Controls_Up;
    private readonly InputAction m_Controls_Down;
    private readonly InputAction m_Controls_Left;
    private readonly InputAction m_Controls_Right;
    private readonly InputAction m_Controls_Jump;
    private readonly InputAction m_Controls_Escape;
    private readonly InputAction m_Controls_Interact;
    private readonly InputAction m_Controls_Cancel;
    private readonly InputAction m_Controls_Map;
    private readonly InputAction m_Controls_Cast;
    private readonly InputAction m_Controls_SpellUp;
    private readonly InputAction m_Controls_SpellDown;
    private readonly InputAction m_Controls_SpellLeft;
    private readonly InputAction m_Controls_SpellRight;
    public struct ControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Controls_Up;
        public InputAction @Down => m_Wrapper.m_Controls_Down;
        public InputAction @Left => m_Wrapper.m_Controls_Left;
        public InputAction @Right => m_Wrapper.m_Controls_Right;
        public InputAction @Jump => m_Wrapper.m_Controls_Jump;
        public InputAction @Escape => m_Wrapper.m_Controls_Escape;
        public InputAction @Interact => m_Wrapper.m_Controls_Interact;
        public InputAction @Cancel => m_Wrapper.m_Controls_Cancel;
        public InputAction @Map => m_Wrapper.m_Controls_Map;
        public InputAction @Cast => m_Wrapper.m_Controls_Cast;
        public InputAction @SpellUp => m_Wrapper.m_Controls_SpellUp;
        public InputAction @SpellDown => m_Wrapper.m_Controls_SpellDown;
        public InputAction @SpellLeft => m_Wrapper.m_Controls_SpellLeft;
        public InputAction @SpellRight => m_Wrapper.m_Controls_SpellRight;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnRight;
                @Jump.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnJump;
                @Escape.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnEscape;
                @Interact.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnInteract;
                @Cancel.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnCancel;
                @Map.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMap;
                @Map.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMap;
                @Map.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMap;
                @Cast.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnCast;
                @Cast.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnCast;
                @Cast.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnCast;
                @SpellUp.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellUp;
                @SpellUp.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellUp;
                @SpellUp.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellUp;
                @SpellDown.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellDown;
                @SpellDown.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellDown;
                @SpellDown.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellDown;
                @SpellLeft.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellLeft;
                @SpellLeft.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellLeft;
                @SpellLeft.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellLeft;
                @SpellRight.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellRight;
                @SpellRight.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellRight;
                @SpellRight.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSpellRight;
            }
            m_Wrapper.m_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Map.started += instance.OnMap;
                @Map.performed += instance.OnMap;
                @Map.canceled += instance.OnMap;
                @Cast.started += instance.OnCast;
                @Cast.performed += instance.OnCast;
                @Cast.canceled += instance.OnCast;
                @SpellUp.started += instance.OnSpellUp;
                @SpellUp.performed += instance.OnSpellUp;
                @SpellUp.canceled += instance.OnSpellUp;
                @SpellDown.started += instance.OnSpellDown;
                @SpellDown.performed += instance.OnSpellDown;
                @SpellDown.canceled += instance.OnSpellDown;
                @SpellLeft.started += instance.OnSpellLeft;
                @SpellLeft.performed += instance.OnSpellLeft;
                @SpellLeft.canceled += instance.OnSpellLeft;
                @SpellRight.started += instance.OnSpellRight;
                @SpellRight.performed += instance.OnSpellRight;
                @SpellRight.canceled += instance.OnSpellRight;
            }
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IControlsActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnMap(InputAction.CallbackContext context);
        void OnCast(InputAction.CallbackContext context);
        void OnSpellUp(InputAction.CallbackContext context);
        void OnSpellDown(InputAction.CallbackContext context);
        void OnSpellLeft(InputAction.CallbackContext context);
        void OnSpellRight(InputAction.CallbackContext context);
    }
}
